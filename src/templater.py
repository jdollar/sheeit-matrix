from datetime import datetime
import random
from pyhtml2pdf import converter
from pathlib import Path
import typer
from jinja2 import Environment, FileSystemLoader
from typing_extensions import Annotated

def divide_chunks(input_list, chunk_size):
    """Iterator/Generator function that returns a 'chunk_size' sized list from the input_list each time this function is requested"""
    # Loops through the range generated by the combination of chunk_size and len(input_list)
    # if input_list is [1,2,3,4,5,6,7,8,9,10]
    # and chunk_size is 3
    # range here is [0,3,6,9] so i will be 0 in the first iteration, 3 in the second, 6 in the third and finally 9
    # range(start, stop, step)
    for i in range(0, len(input_list), chunk_size): 
        # Copies elements input_list[0] to input_list[i + chunk_size] into a new list called chunk
        chunk = input_list[i:i + chunk_size]
        # pad the array with empty strings
        # if we don't have enough to create a chunk of length 'chunk_size'
        chunk = chunk + ([''] * (chunk_size - len(chunk)))
        yield chunk

def main(
    template: Annotated[
        Path,
        typer.Option(
            exists=True,
            file_okay=True,
            dir_okay=False,
            readable=True,
            resolve_path=True,
            help="Path to the template file to use to generate the QR codes. Must be a jinja2 template file.",
        )
    ],
    count: Annotated[
        int,
        typer.Option(
            min=0,
            help="Number of QR codes to generate",
        )
    ],
    code: Annotated[
        int,
        typer.Option(min=0, max=999)
    ],
    violation: Annotated[
        int,
        typer.Option(min=0, max=999)
    ],
    date: Annotated[
        datetime,
        typer.Option(formats=['%Y%m%d'])
    ] = datetime.now(),
    cle: Annotated[
        int,
        typer.Option(min=0, max=999)
    ] = 0,
    qr_codes_per_page: Annotated[
        int,
        typer.Option(
            min=0,
            help="The number of qr codes to stick on a page. Note, this number can shrink or grow depending on the size of each individual block housing the qr code in the template.",
        )
    ] = 9,
    html_output: Annotated[
        Path,
        typer.Option(
            dir_okay=False,
            writable=True,
            resolve_path=True,
            help="Path to the output html file. Primarily used for debugging.",
        )
    ] = Path(f"dist/{datetime.now().strftime('%Y-%m-%d-%H-%M-%S')}.html"),
    pdf_output: Annotated[
        Path,
        typer.Option(
            dir_okay=False,
            writable=True,
            resolve_path=True,
            help="Path to the output pdf file.",
        )
    ] = Path(f"dist/{datetime.now().strftime('%Y-%m-%d-%H-%M-%S')}.pdf"),
    assets_directory: Annotated[
        Path,
        typer.Option(
            file_okay=False,
            dir_okay=True,
            readable=True,
            resolve_path=True,
            help="Path to any assets you want to include in the template.",
        )
    ] = Path("assets"),
):
    # Setup the Jinja environment, saying we want to load files from the current working directory (cwd)
    # of the template file we passed in.
    environment = Environment(loader=FileSystemLoader(template.cwd()))
 
    # allowing us to call the divide_checks function from within the template
    environment.globals.update(divide_chunks=divide_chunks)

    # Loading the template provided from the template command line option into jinja for later rendering
    templateFile = environment.get_template(template.name)

    already_created = set()
    qr_codes = list()
    for _ in range(count):
        serial_number = ""
        # serial number is always empty the first iteration, continues until we have a serial number
        # that we haven't created in the previous iterations of the loop
        while serial_number == "" or serial_number in already_created:
            # converting options to strings and ensuring they are all 3 digits, padded with zeros on the left
            # code = 2 => code_str = 002
            code_str = str(code).zfill(3)
            violation_str = str(violation).zfill(3)
            cle_str = str(cle).zfill(3)
            rando = random.randrange(100000, 900000)

            # Join all the elements of this list together into a single string
            serial_number = "".join([date.strftime('%Y%m%d'), code_str, violation_str, cle_str, str(rando)])

        # keep track of serial numbers we have already created
        already_created.add(serial_number)

        qr_codes.append({
            'serial_number': serial_number
        })

    # Create the html file to use to generate the pdf
    with open(html_output, mode="w", encoding="utf-8") as html_file:
        # Pass parameters into template file, render out the resulting html into the content variable
        content = templateFile.render(qr_codes=qr_codes, qr_codes_per_page=qr_codes_per_page, assets_directory=assets_directory)
        html_file.write(content)

    # Call library to convert the generated html to a pdf
    # uses selenium to headlessly render the html using chrome
    converter.convert(f"file:///{html_output.absolute()}", str(pdf_output))

    print(f"Created a PDF at this location: {pdf_output.absolute()}")

# When this python file is created, we run the main function
if __name__ == "__main__":
    typer.run(main)
